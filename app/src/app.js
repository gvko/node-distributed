#!/usr/bin/env node
"use strict";
/* istanbul ignore file */
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const bodyParser = require("body-parser");
const cors = require("cors");
const node_logger_bunyan_1 = require("node-logger-bunyan");
const catch_and_log_errors_1 = require("./middlewares/catch-and-log-errors");
const req_res_logger_1 = require("./middlewares/req-res-logger");
/*
 * If production env, then load the config file with the values from the environment variables provided to the container.
 * Otherwise just load the local config file for the current environment.
 */
let config = require(`../config/${process.env.NODE_ENV.toLowerCase()}.json`);
if (process.env.NODE_ENV === 'production') {
    let configStringified = JSON.stringify(config);
    Object.keys(process.env).forEach(key => {
        configStringified = configStringified.replace(key, process.env[key]);
    });
    config = JSON.parse(configStringified);
    console.log(config);
}
const connections = require('./util/connections');
const indexRouter = require('./routes/index');
const reservationsRouter = require('./routes/reservations');
const app = express();
const port = process.env.PORT || '3000';
const serviceName = process.env.SERVICE_NAME || process.env.HOSTNAME;
/*
 * Initialize the logger before anything else, so we can use it in middleware, etc.
 */
const logInTestEnv = process.env.LOG_TEST_ENV && process.env.LOG_TEST_ENV === 'true';
app['log'] = node_logger_bunyan_1.default(serviceName, { logInTestEnv });
app
    .use(bodyParser.json())
    .options('*', cors())
    .use(cors())
    .use(bodyParser.urlencoded({ extended: true }))
    /*
     * Request-Response Logger
     */
    .use(req_res_logger_1.default)
    /*
     * Routes
     */
    .use('/', indexRouter)
    .use('/reservations', reservationsRouter)
    /*
     * Error handler
     */
    .use(catch_and_log_errors_1.default);
/*
 * Set some of the initialized config and connections as properties of the app object, so that they are
 * accessible anywhere across the app
 */
app['config'] = config;
app['redis'] = connections.initRedis(config);
app['service'] = {};
/*
 * Start the service
 */
app.listen(port, () => {
    app.log.info(`Server started on port ${port} (container exposed: ${process.env.EXPOSED_PORT})`);
});
exports.default = app;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LFlBQVksR0FBRyxDQUFDLENBQUM7QUFDbEcsQ0FBQyxDQUFDLENBQUM7QUFFSCxrQkFBZSxHQUFHLENBQUMiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuLyogaXN0YW5idWwgaWdub3JlIGZpbGUgKi9cblxuaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCAqIGFzIGJvZHlQYXJzZXIgZnJvbSAnYm9keS1wYXJzZXInO1xuaW1wb3J0ICogYXMgY29ycyBmcm9tICdjb3JzJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnbm9kZS1sb2dnZXItYnVueWFuJztcbmltcG9ydCBlcnJvckhhbmRsZXIgZnJvbSAnLi9taWRkbGV3YXJlcy9jYXRjaC1hbmQtbG9nLWVycm9ycyc7XG5pbXBvcnQgcmVxUmVzTG9nZ2VyIGZyb20gJy4vbWlkZGxld2FyZXMvcmVxLXJlcy1sb2dnZXInO1xuXG4vKlxuICogSWYgcHJvZHVjdGlvbiBlbnYsIHRoZW4gbG9hZCB0aGUgY29uZmlnIGZpbGUgd2l0aCB0aGUgdmFsdWVzIGZyb20gdGhlIGVudmlyb25tZW50IHZhcmlhYmxlcyBwcm92aWRlZCB0byB0aGUgY29udGFpbmVyLlxuICogT3RoZXJ3aXNlIGp1c3QgbG9hZCB0aGUgbG9jYWwgY29uZmlnIGZpbGUgZm9yIHRoZSBjdXJyZW50IGVudmlyb25tZW50LlxuICovXG5sZXQgY29uZmlnID0gcmVxdWlyZShgLi4vY29uZmlnLyR7cHJvY2Vzcy5lbnYuTk9ERV9FTlYudG9Mb3dlckNhc2UoKX0uanNvbmApO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbGV0IGNvbmZpZ1N0cmluZ2lmaWVkOiBzdHJpbmcgPSBKU09OLnN0cmluZ2lmeShjb25maWcpO1xuXG4gIE9iamVjdC5rZXlzKHByb2Nlc3MuZW52KS5mb3JFYWNoKGtleSA9PiB7XG4gICAgY29uZmlnU3RyaW5naWZpZWQgPSBjb25maWdTdHJpbmdpZmllZC5yZXBsYWNlKGtleSwgcHJvY2Vzcy5lbnZba2V5XSk7XG4gIH0pO1xuXG4gIGNvbmZpZyA9IEpTT04ucGFyc2UoY29uZmlnU3RyaW5naWZpZWQpO1xuICBjb25zb2xlLmxvZyhjb25maWcpO1xufVxuXG5jb25zdCBjb25uZWN0aW9ucyA9IHJlcXVpcmUoJy4vdXRpbC9jb25uZWN0aW9ucycpO1xuY29uc3QgaW5kZXhSb3V0ZXIgPSByZXF1aXJlKCcuL3JvdXRlcy9pbmRleCcpO1xuY29uc3QgcmVzZXJ2YXRpb25zUm91dGVyID0gcmVxdWlyZSgnLi9yb3V0ZXMvcmVzZXJ2YXRpb25zJyk7XG5cbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbmNvbnN0IHBvcnQgPSBwcm9jZXNzLmVudi5QT1JUIHx8ICczMDAwJztcbmNvbnN0IHNlcnZpY2VOYW1lOiBzdHJpbmcgPSBwcm9jZXNzLmVudi5TRVJWSUNFX05BTUUgfHwgcHJvY2Vzcy5lbnYuSE9TVE5BTUU7XG5cbi8qXG4gKiBJbml0aWFsaXplIHRoZSBsb2dnZXIgYmVmb3JlIGFueXRoaW5nIGVsc2UsIHNvIHdlIGNhbiB1c2UgaXQgaW4gbWlkZGxld2FyZSwgZXRjLlxuICovXG5jb25zdCBsb2dJblRlc3RFbnY6IGJvb2xlYW4gPSBwcm9jZXNzLmVudi5MT0dfVEVTVF9FTlYgJiYgcHJvY2Vzcy5lbnYuTE9HX1RFU1RfRU5WID09PSAndHJ1ZSc7XG5hcHBbJ2xvZyddID0gbG9nZ2VyKHNlcnZpY2VOYW1lLCB7IGxvZ0luVGVzdEVudiB9KTtcblxuYXBwXG4gIC51c2UoYm9keVBhcnNlci5qc29uKCkpXG4gIC5vcHRpb25zKCcqJywgY29ycygpKVxuICAudXNlKGNvcnMoKSlcbiAgLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSB9KSlcbiAgLypcbiAgICogUmVxdWVzdC1SZXNwb25zZSBMb2dnZXJcbiAgICovXG4gIC51c2UocmVxUmVzTG9nZ2VyKVxuICAvKlxuICAgKiBSb3V0ZXNcbiAgICovXG4gIC51c2UoJy8nLCBpbmRleFJvdXRlcilcbiAgLnVzZSgnL3Jlc2VydmF0aW9ucycsIHJlc2VydmF0aW9uc1JvdXRlcilcbiAgLypcbiAgICogRXJyb3IgaGFuZGxlclxuICAgKi9cbiAgLnVzZShlcnJvckhhbmRsZXIpO1xuXG4vKlxuICogU2V0IHNvbWUgb2YgdGhlIGluaXRpYWxpemVkIGNvbmZpZyBhbmQgY29ubmVjdGlvbnMgYXMgcHJvcGVydGllcyBvZiB0aGUgYXBwIG9iamVjdCwgc28gdGhhdCB0aGV5IGFyZVxuICogYWNjZXNzaWJsZSBhbnl3aGVyZSBhY3Jvc3MgdGhlIGFwcFxuICovXG5hcHBbJ2NvbmZpZyddID0gY29uZmlnO1xuYXBwWydyZWRpcyddID0gY29ubmVjdGlvbnMuaW5pdFJlZGlzKGNvbmZpZyk7XG5hcHBbJ3NlcnZpY2UnXSA9IHt9O1xuXG4vKlxuICogU3RhcnQgdGhlIHNlcnZpY2VcbiAqL1xuYXBwLmxpc3Rlbihwb3J0LCAoKSA9PiB7XG4gIGFwcC5sb2cuaW5mbyhgU2VydmVyIHN0YXJ0ZWQgb24gcG9ydCAke3BvcnR9IChjb250YWluZXIgZXhwb3NlZDogJHtwcm9jZXNzLmVudi5FWFBPU0VEX1BPUlR9KWApO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGFwcDtcbiJdfQ==
